# With docker
# Build and push connector images to Azure Container Registry
# Update infrastructure repository

trigger:
- master

# exclude from pull-requests 
# publish to production only on merge to master
pr: none

resources:
  repositories:
  - repository: Infrastructure
    type: bitbucket
    endpoint: BitbucketAzureServiceConnection
    name: NetworkPerspective/NetworkPerspective.Infrastructure
    ref: 'refs/heads/master'  # Check out the master branch

variables:
  version: '3.0'
  tag: '$(version).$(Build.BuildId)'

  commitTagFile: 'Connectors/Prod/Tag.txt'
  commitTagMessage: 'Connectors PROD release v$(tag)'

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '186fdce6-dcaa-4d2e-ad98-fd7fb7793956'
  containerRegistry: 'networkperspective.azurecr.io'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build and push prod
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - checkout: self
      persistCredentials: true
      displayName: Checkout repo
    - task: Docker@2
      displayName: Build and push Worker
      inputs:
        command: buildAndPush
        repository: 'connectors/worker'
        dockerfile: '$(Build.SourcesDirectory)/src/Worker.Dockerfile'
        containerRegistry: $(dockerRegistryServiceConnection)
        arguments: --build-arg VERSION=$(tag)
        tags: |
          $(tag)
          latest
    - task: Docker@2
      displayName: Build and push Orchestrator
      inputs:
        command: buildAndPush
        repository: 'connectors/orchestrator'
        dockerfile: '$(Build.SourcesDirectory)/src/Orchestrator.Dockerfile'
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
          latest
    - script: |
        git tag v$(tag)
        git push origin v$(tag)
      workingDirectory: $(Build.SourcesDirectory)
      displayName: Add tag to repository
    
    - task: Docker@2
      displayName: Push Nightly Helm chart to OCI registry
      inputs:
        command: login
        containerRegistry: $(dockerRegistryServiceConnection)
    - script: |
        helm package infra/helm-charts/np-worker --version $(tag) --destination infra/helm-charts/np-worker/charts
        helm push infra/helm-charts/np-worker/charts/np-worker-$(tag).tgz oci://$(containerRegistry)/helm-nightly
      displayName: Build and publish Helm chart to OCI registry
      workingDirectory: $(Build.SourcesDirectory)
    


- stage: UpdateInfrastructure 
  displayName: Update infrastructure 
  jobs:
  - job: BumpVersion
    displayName: Bump version
    pool:
      vmImage: $(vmImageName)
    steps:
      - checkout: Infrastructure
        displayName: Checkout infrastructure
        clean: true
        persistCredentials: true
        path: 'Infrastructure' 
        fetchDepth: 0             # Fetch all history and branches
        
      - script: |
          git config user.email "azure@networkperspective.io"
          git config user.name "Azure Pipeline"

          git fetch origin master          
          git checkout -B master origin/master
          git pull origin master           

          echo $(tag) > $(commitTagFile)
          git add -A
          git commit -m "$(commitTagMessage)"
          git push origin master
        displayName: Update PROD release version
        workingDirectory: $(Pipeline.Workspace)/Infrastructure  