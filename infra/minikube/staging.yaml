# shared between all connectors subcharts
global:
  tlsSecret: np-sync-tls-staging

  imagePullSecrets: 
    - name: np-sync-np-acr

  mssql:
    saSecret: np-sync-mssql-sapassword    

  appSettings:
    networkPerspectiveApi: https://app.networkperspective.io/
    applicationInsightsConnectionString: "InstrumentationKey=b35d1670-180c-44dc-8cf6-2a9eb4b3968f;IngestionEndpoint=https://germanywestcentral-1.in.applicationinsights.azure.com/;LiveEndpoint=https://germanywestcentral.livediagnostics.monitor.azure.com/"
    useLocalHcpVault: false
    hcpVaultUri: "http://np-sync-vault:8200"

  domainValidation:
    enabled: true
    hostedZoneName: c4.test.networkperspective.io
    clientID: 59277c71-743b-46ca-9bf3-3f7a2c5949ea
    clientSecretRef: np-sync-domain-validation
    subscriptionID: f1249bd2-7e57-4a25-b4f0-c1baabdb3c99
    tenantID: 1d930625-fab1-4dd2-8fc3-77066150120e
    resourceGroupName: RG-Test-Connectors
    email: blazej@networkperspective.io
    environment: staging
    # environment: production

  nodeSelector: {}
  tolerations: []
  affinity: {}
  redeployOnUpdate: true

mssql:
  enabled: true
  edition: 
    value: Express

gsuite:
  enabled: true
  googleKeys: "np-sync-gsuite-secrets"
  ingress:
    hosts: 
    - host: gsuite.c4.test.networkperspective.io
    tls: 
    - hosts:
        - gsuite.c4.test.networkperspective.io

slack:
  enabled: true
  slackSecrets: "np-sync-slack-secrets"
  ingress:
    hosts: 
    - host: slack.c4.test.networkperspective.io
    tls: 
    - hosts:
        - slack.c4.test.networkperspective.io

excel:
  enabled: true
  excelSecrets: "np-sync-excel-secrets"
  # extraEnvironmentVars:
  #   test: "test-value"
  #   test2: "test-value2"
  ingress:
    hosts: 
    - host: excel.c4.test.networkperspective.io
    tls: 
    - hosts:
        - excel.c4.test.networkperspective.io

vault:
  global:
    enabled: true
    tlsDisable: false
  injector:
    enabled: false
  server:
    dev:
      enabled: true  # Set to false if you are going production
    standalone:
      config: |
        ui = true
        
        storage "file" {
          path = "/vault/data"
        }
        listener "tcp" {
          address = "0.0.0.0:8200"
          tls_cert_file = "/vault/userconfig/vault-tls/tls.crt"
          tls_key_file  = "/vault/userconfig/vault-tls/tls.key"
        }
    volumes:
    - name: vault-tls
      secret:
        defaultMode: 0420
        secretName: np-sync-tls-staging
    volumeMounts:
    - mountPath: "/vault/userconfig/vault-tls"
      name: vault-tls
      readOnly: true
    service:
      type: ClusterIP
    auditStorage:      
      enabled: false
    extraEnvironmentVars:
      VAULT_ADDR: "http://np-sync-vault:8200"

    # a sidecar that will trigger reload of vault config including tls certificates every 24 hours
    shareProcessNamespace: true
    extraContainers:
    - name: daily-reload
      image: "alpine:latest"
      imagePullPolicy: IfNotPresent
      command: ["/bin/sh", "-c"]
      args:
        - |
          while true; do
            sleep 86400            
            VAULT_PID=$(pidof vault)            
            if [ -n "$VAULT_PID" ]; then
              kill -HUP $VAULT_PID
            else
              echo "Vault process not found. Cannot reload."
            fi
          done

networkPolicy:
  # forbid traffic from other namespaces
  enabled: true

nLogSettings:
  content: |
    {
      "Logging": {
        "NLog": {
          "IncludeScopes": true
        }
      },
      "NLog": {
        "throwConfigExceptions": true,
        "extensions": [
          { "assembly": "NLog.Web.AspNetCore" },
          { "assembly": "NLog.Extensions.Logging" },
          { "assembly": "Microsoft.ApplicationInsights.NLogTarget" }
        ],
        "variables": {
          "layoutHeader": "${date:universalTime=true:format=yyyy-MM-dd HH\\:mm\\:ss.fff}|${level:truncate=4:uppercase=true}|${logger}",
          "layoutBody": "${message}${exception:format=tostring}",
          "minLevel": "Debug"
        },
        "targets": {
          "console": {
            "type": "ColoredConsole",
            "layout": "${layoutHeader}|${layoutBody}"
          }
        },
        "rules": [          
          {
            "logger": "*",
            "minLevel": "${minLevel}",
            "writeTo": "console"
          }          
        ]
      }
    }

