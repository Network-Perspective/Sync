{
  "swagger": "2.0",
  "info": {
    "title": "Network Perspective",
    "version": "v1"
  },
  "host": "app.networkperspective.io",
  "schemes": [
    "https"
  ],
  "paths": {
    "/api/account/is-logged-in": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Is logged in",
        "description": "Validates provided access token",
        "operationId": "Account_GetIsLoggedIn",
        "responses": {
          "200": {
            "description": "Logged in"
          },
          "401": {
            "description": "Logged out"
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/account/status": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "User status",
        "operationId": "Account_GetUserStatus",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "userName",
            "type": "string"
          },
          {
            "in": "query",
            "name": "userId",
            "type": "string"
          },
          {
            "in": "query",
            "name": "invitationToken",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UserStatus"
            }
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/account/login": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Login and redirect to app",
        "operationId": "Account_PostLogin",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "Username",
            "type": "string"
          },
          {
            "in": "formData",
            "name": "Password",
            "type": "string"
          },
          {
            "in": "formData",
            "name": "RedirectUri",
            "type": "string"
          }
        ],
        "responses": {
          "302": {
            "description": "Success"
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/account/login-form": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Login form",
        "operationId": "Account_GetLoginForm",
        "parameters": [
          {
            "in": "query",
            "name": "username",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/account/logout": {
      "delete": {
        "tags": [
          "Account"
        ],
        "summary": "Logout",
        "operationId": "Account_Logout",
        "parameters": [
          {
            "in": "query",
            "name": "refreshToken",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/account/demo": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Register for demo",
        "operationId": "Account_RegisterForDemo",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/RegisterForDemoCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/account/register": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Register user",
        "operationId": "Account_RegisterUser",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/RegisterUserCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/account/register-with-token": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Register with token",
        "operationId": "Account_RegisterWithToken",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/RegisterWithTokenCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TokenResponseModel"
            }
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/account/confirm-email": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Confirm email",
        "operationId": "Account_ConfirmEmail",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/ConfirmEmailCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TokenResponseModel"
            }
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/account/send-email-confirmation-token": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Send email confirmation token",
        "operationId": "Account_SendEmailConfirmationToken",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/SendEmailConfirmationTokenCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/account/send-password-reset-token": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Send password reset token",
        "operationId": "Account_SendPasswordResetToken",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/SendPasswordResetTokenCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/account/validate-password-reset-token": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Validate password reset token",
        "operationId": "Account_ValidatePasswordResetToken",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/ValidatePasswordResetTokenCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ValidatePasswordResetTokenResult"
            }
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/account/reset-password": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Reset password",
        "operationId": "Account_ResetPassword",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/ResetPasswordCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TokenResponseModel"
            }
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/account/change-password": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Change password",
        "operationId": "Account_ChangePassword",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/ChangePasswordCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/account/settings": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Settings",
        "operationId": "Account_GetSettings",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "networkId",
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UserSettingsResult"
            }
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/account/networks": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Networks",
        "operationId": "Account_GetNetworks",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserNetworkResult"
              }
            }
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/activity/{networkId}/me": {
      "get": {
        "tags": [
          "Activity"
        ],
        "summary": "My activity",
        "operationId": "Activity_MyActivity",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "networkId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CombinedSearchResult"
              }
            }
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/activity/{networkId}": {
      "get": {
        "tags": [
          "Activity"
        ],
        "summary": "Network activity",
        "operationId": "Activity_RecentActivity",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "networkId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ActivityResult"
              }
            }
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/activity/{networkId}/stats": {
      "get": {
        "tags": [
          "Activity"
        ],
        "summary": "Activity stats",
        "operationId": "Activity_ActivityStats",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "networkId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NetworkActivityStatsResult"
              }
            }
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/assets": {
      "get": {
        "tags": [
          "Assets"
        ],
        "summary": "All",
        "operationId": "Assets_All",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AdminAssetsResult"
            }
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/assets/{networkId}/perspectives": {
      "get": {
        "tags": [
          "Assets"
        ],
        "summary": "Perspectives",
        "operationId": "Assets_GetPerspectives",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "networkId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PerspectiveResult"
              }
            }
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      },
      "post": {
        "tags": [
          "Assets"
        ],
        "summary": "New perspective",
        "operationId": "Assets_NewPerspective",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "networkId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "name",
            "type": "string"
          },
          {
            "in": "query",
            "name": "description",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/assets/{networkId}/perspectives/zipped": {
      "get": {
        "tags": [
          "Assets"
        ],
        "summary": "Download perspectives",
        "operationId": "Assets_ZippedPerspectives",
        "parameters": [
          {
            "in": "path",
            "name": "networkId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/assets/{networkId}/perspectives/upload": {
      "post": {
        "tags": [
          "Assets"
        ],
        "summary": "Upload perspective",
        "operationId": "Assets_UploadPerspectiveCode",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "networkId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Syntax error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/assets/perspectives/{perspectiveId}": {
      "delete": {
        "tags": [
          "Assets"
        ],
        "summary": "Delete perspective",
        "operationId": "Assets_DeletePerspective",
        "parameters": [
          {
            "in": "path",
            "name": "perspectiveId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/assets/code": {
      "get": {
        "tags": [
          "Assets"
        ],
        "summary": "Perspective code",
        "operationId": "Assets_GetPerspectiveCode",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "perspectiveId",
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CodeResult"
            }
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      },
      "post": {
        "tags": [
          "Assets"
        ],
        "summary": "Update perspective code",
        "operationId": "Assets_UpdatePerspectiveCode",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "perspectiveId",
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Syntax error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/assets/networks": {
      "post": {
        "tags": [
          "Assets"
        ],
        "summary": "New network",
        "operationId": "Assets_CreateNetwork",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/assets/networks/{networkId}": {
      "put": {
        "tags": [
          "Assets"
        ],
        "summary": "Update network",
        "operationId": "Assets_UpdateNetwork",
        "parameters": [
          {
            "in": "path",
            "name": "networkId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "name",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      },
      "delete": {
        "tags": [
          "Assets"
        ],
        "summary": "Delete network",
        "operationId": "Assets_DeleteNetwork",
        "parameters": [
          {
            "in": "path",
            "name": "networkId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/assets/{networkId}/settings": {
      "get": {
        "tags": [
          "Assets"
        ],
        "summary": "Settings as code",
        "operationId": "Assets_GetNetworkSettingsCode",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "networkId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CodeResult"
            }
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      },
      "put": {
        "tags": [
          "Assets"
        ],
        "summary": "Update settings",
        "operationId": "Assets_UpdateNetworkSettingsCode",
        "parameters": [
          {
            "in": "path",
            "name": "networkId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "code",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      },
      "delete": {
        "tags": [
          "Assets"
        ],
        "summary": "Delete settings",
        "description": "Reverts settings to defaults",
        "operationId": "Assets_DeleteNetworkSettingsCode",
        "parameters": [
          {
            "in": "path",
            "name": "networkId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/connector": {
      "put": {
        "tags": [
          "Connector"
        ],
        "summary": "Add connector",
        "operationId": "Connector_Add",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/AddConnectorCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      },
      "delete": {
        "tags": [
          "Connector"
        ],
        "summary": "Delete connector",
        "operationId": "Connector_Delete",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/DeleteConnectorCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      },
      "get": {
        "tags": [
          "Connector"
        ],
        "summary": "Connector details",
        "operationId": "Connector_Details",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "networkId",
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "connectorId",
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ConnectorDetailsResult"
            }
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/connector/update": {
      "post": {
        "tags": [
          "Connector"
        ],
        "summary": "Update connector",
        "operationId": "Connector_UpdateConnector",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/UpdateConnectorCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/connector/token": {
      "get": {
        "tags": [
          "Connector"
        ],
        "summary": "Query token",
        "operationId": "Connector_QueryServiceToken",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ServiceResult"
            }
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      },
      "put": {
        "tags": [
          "Connector"
        ],
        "summary": "Generate service token",
        "operationId": "Connector_GenerateServiceToken",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/AddServiceTokenCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/connector/privacy-filter": {
      "get": {
        "tags": [
          "Connector"
        ],
        "summary": "Privacy filter",
        "operationId": "Connector_PrivacyFilter",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ConnectorPrivacyFilterResult"
            }
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/connector/valid-users-filter": {
      "get": {
        "tags": [
          "Connector"
        ],
        "summary": "Valid usernames hashed\r\nSHA256 (Username)",
        "operationId": "Connector_ValidUsersFilter",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ConnectorValidUsersFilterResult"
            }
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/connector/members": {
      "post": {
        "tags": [
          "Connector"
        ],
        "summary": "Sync members (adds member role to synced entities)",
        "operationId": "Connector_SyncMembers",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/SyncMembersCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/connector/members(bg)": {
      "post": {
        "tags": [
          "Connector"
        ],
        "summary": "Sync members (in background job)",
        "operationId": "Connector_SyncMembersBackground",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/SyncMembersCommand"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Success",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/connector/entities": {
      "post": {
        "tags": [
          "Connector"
        ],
        "summary": "Sync entities [nodes in graph but not necessarily network members]",
        "operationId": "Connector_SyncEntities",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/SyncEntitiesCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/connector/entities(bg)": {
      "post": {
        "tags": [
          "Connector"
        ],
        "summary": "Sync entities [nodes in graph but not necessarily network members]\r\n(in background job)",
        "operationId": "Connector_SyncEntitiesBackground",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/SyncEntitiesCommand"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Success",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/connector/validate-entities(bg)": {
      "post": {
        "tags": [
          "Connector"
        ],
        "summary": "Validate entities [nodes in graph but not necessarily network members]\r\n(in background job)",
        "operationId": "Connector_ValidateEntitiesBackground",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/ValidateEntitiesCommand"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Success",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/connector/photo": {
      "post": {
        "tags": [
          "Connector"
        ],
        "summary": "Upload member photo",
        "operationId": "Connector_UploadMemberPhoto",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "token",
            "type": "string"
          },
          {
            "in": "query",
            "name": "userName",
            "type": "string"
          },
          {
            "in": "formData",
            "name": "file",
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/connector/interactions": {
      "post": {
        "tags": [
          "Connector"
        ],
        "summary": "Sync interactions",
        "operationId": "Connector_SyncInteractions",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/SyncInteractionsCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/connector/convert-interactions": {
      "post": {
        "tags": [
          "Connector"
        ],
        "summary": "Convert interactions",
        "operationId": "Connector_ConvertInteractions",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/ConvertInteractionsToRelationshipsCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/connector/convert-interactions(bg)": {
      "post": {
        "tags": [
          "Connector"
        ],
        "summary": "Convert interactions",
        "operationId": "Connector_ConvertInteractionsBackground",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/ConvertInteractionsToRelationshipsCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/connector/interactions(bg)": {
      "post": {
        "tags": [
          "Connector"
        ],
        "summary": "Sync interactions (in background job)",
        "operationId": "Connector_SyncInteractionsBackground",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/SyncInteractionsCommand"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Success",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/connector/sign-in": {
      "get": {
        "tags": [
          "Connector"
        ],
        "summary": "SSO provider status",
        "operationId": "Connector_GetSignInProviderStatus",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "networkId",
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "authority",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SignInProviderStatusResult"
            }
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      },
      "post": {
        "tags": [
          "Connector"
        ],
        "summary": "Add SSO provider",
        "operationId": "Connector_AddSignInProvider",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/AddSignInProviderCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      },
      "delete": {
        "tags": [
          "Connector"
        ],
        "summary": "Remove SSO provider",
        "operationId": "Connector_RemoveSignInProvider",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/RemoveSignInProviderCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/edges/{networkId}": {
      "post": {
        "tags": [
          "Edges"
        ],
        "summary": "List",
        "operationId": "Edges_List",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "networkId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NetworkEdgeResult"
              }
            }
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      },
      "delete": {
        "tags": [
          "Edges"
        ],
        "summary": "Delete",
        "operationId": "Edges_Delete",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "networkId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "type": "array",
              "items": {
                "format": "uuid",
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/file": {
      "post": {
        "tags": [
          "File"
        ],
        "summary": "Save",
        "operationId": "File_Save",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "networkId",
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "formData",
            "name": "file",
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/file/{networkId}/{fileId}.{ext}": {
      "get": {
        "tags": [
          "File"
        ],
        "summary": "Read",
        "operationId": "File_Get",
        "parameters": [
          {
            "in": "path",
            "name": "networkId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "path",
            "name": "fileId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "ext",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "fallback",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/graph/{networkId}/schema": {
      "get": {
        "tags": [
          "Graph"
        ],
        "summary": "Schema",
        "operationId": "Graph_Schema",
        "parameters": [
          {
            "in": "path",
            "name": "networkId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/graph/{networkId}/perspectives": {
      "post": {
        "tags": [
          "Graph"
        ],
        "summary": "Perspectives",
        "operationId": "Graph_Perspectives",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "networkId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "doNotCache",
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GraphPerspectivesResult"
            }
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/graph/{networkId}/query": {
      "post": {
        "tags": [
          "Graph"
        ],
        "summary": "Query",
        "description": "Select whole graph:\r\n<code>SELECT *</code>\r\n            \r\nSelect a particular vertex:\r\n<code>\r\nSELECT * WHERE id = '396d78df-a6bf-40cf-812e-6537cd1ff5de'\r\n</code>\r\n            \r\nSelect one department:\r\n<code>SELECT * WHERE department = \"Marketing\"</code>\r\n            \r\nSelect all directors (director, director of operations, etc.):\r\n<code>SELECT * WHERE position LIKE '%director%'</code>\r\n            \r\nLimit result to specyfic vertex props, and only two types of edges:\r\n<code>\r\nSELECT name, position AS description, department, <br />\r\nedge.cooperation, edge.[knowledge sharing]<br />\r\nWHERE department = \"Marketing\"\r\n</code>\r\n            \r\nConditions can be combined with AND and OR operators.\r\nThis query will return specific vertex props props and only two types of edges\r\nlimiting results to only directors from two departments (IT or Marketing)\r\n<code>\r\nSELECT name, position, department, <br />\r\nedge.cooperation, edge.[knowledge sharing]<br />\r\nWHERE (department = \"IT\" OR department = \"Marketing\")<br />\r\n   AND position LIKE '%directors%'\r\n</code>\r\n            \r\nIt is possible to query nodes according to their connectivity.\r\n            \r\nFor instance you can query all neighbours of some vertex (including the vertex itself)\r\n<code>\r\nSELECT * WHERE edge(source.id = '396d78df-a6bf-40cf-812e-6537cd1ff5de')\r\n</code>\r\n            \r\nThe query below will return all employees that are cooperating with \"Marketing\" department.\r\nThe keyword <samp>edge</samp> matches all incoming and outgoing edges so this will include\r\nnodes on both ends of the replationships.\r\n<code>\r\nSELECT * WHERE edge(Name=\"Cooperation\" AND Source.Dept = \"Marketing\")\r\n</code>\r\n            \r\nOn the other hand keyword <samp>in_edge</samp> matches only incoming edges. So\r\nHence the query below will return only people connected to Marketing department\r\nbut without the Marketing department itself\r\n(unless the Marketing department is internaly connected what is usually the case)\r\n<code>\r\nSELECT * WHERE in_edge(Source.Dept = 'Marketing')\r\n</code>\r\n            \r\nIf we'd like to explicitly exclude the Marketing department by adding an extra condition.\r\n<code>\r\nSELECT * WHERE in_edge(Source.Dept = 'Marketing') AND Dept != 'Marketing'\r\n</code>\r\n            \r\nWe can also limit results to people that often reach out for knowledge witn <samp>out_edge</samp> keyword,\r\nthat matches only outgoing relationships\r\n<code>\r\nSELECT * WHERE out_edge(Name = 'Knowledge' AND Frequency > 3)\r\n</code>\r\n            \r\nThe last edge traversal operator is <samp>mutual_edge</samp> and it matches nodes connected with\r\nmutual relationship.\r\n<code>\r\nSELECT * WHERE mutual_edge(name='Cooperation')\r\n</code>\r\n            \r\nQuery language supports calculating basic graph metrics such as:\r\n<ul><li>degree[(edge_condition)]</li><li>in_degree[(edge_condition)]</li><li>out_degree[(edge_condition)]</li><li>eigenvector[(edge_condition, edge_dist_prop)]</li><li>betweeness[(edge_condition, edge_dist_prop)]</li><li>path_length(target_condition, [edge_condition], [path_dist_prop])</li><li>shortest_path(source_condition, target_condition)</li></ul>\r\n            \r\nA simple query that will calculate indegree looks as follows\r\n<code>\r\nSELECT * CALCULATE indegree\r\n</code>\r\n            \r\nA query that will calculate degree for a particular edge and out_degree for all edges\r\n<code>\r\nSELECT * CALCULATE degree(Name = \"Cooperation\"), out_degree\r\n</code>\r\n            \r\nThis query will return a shortest path between two nodes a and b\r\nthe result will contain all vertices and edges along the path sorted accoring to order in the path\r\n<code>\r\nSELECT * CALCULATE shortest_path(Id='a', Id='b')\r\n</code>",
        "operationId": "Graph_Query",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "networkId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PropertyGraphModel"
            }
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/graph/{networkId}/sigma": {
      "post": {
        "tags": [
          "Graph"
        ],
        "summary": "Sigma",
        "description": "For query syntax see method above (Query)",
        "operationId": "Graph_Sigma",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "networkId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SigmaGraphModel"
            }
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/graph/{networkId}/uri/{uri}": {
      "post": {
        "tags": [
          "Graph"
        ],
        "summary": "Uri query",
        "operationId": "Graph_Uri",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "networkId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "path",
            "name": "uri",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "cache",
            "type": "string",
            "format": "date-span"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "type": "object",
              "additionalProperties": {}
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SigmaGraphModel"
            }
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/graph/{networkId}/do-layout": {
      "put": {
        "tags": [
          "Graph"
        ],
        "summary": "Do layout",
        "description": "For query syntax see method above (Query)",
        "operationId": "Graph_DoLayout",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "networkId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "durationMs",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/graph/{networkId}/layout": {
      "post": {
        "tags": [
          "Graph"
        ],
        "summary": "Save layout",
        "operationId": "Graph_SaveLayout",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "networkId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "key",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/Coords"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/graph/{networkId}/vertices/{vertexId}": {
      "get": {
        "tags": [
          "Graph"
        ],
        "summary": "Vertex",
        "description": "use \"me\" as vertex Id to query own vertex",
        "operationId": "Graph_Vertex",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "networkId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "path",
            "name": "vertexId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PropertyVertexModel"
            }
          },
          "404": {
            "description": "Vertex not found"
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/graph/{networkId}/duplicates": {
      "post": {
        "tags": [
          "Graph"
        ],
        "summary": "Merge duplicates",
        "operationId": "Graph_MergeDuplicates",
        "parameters": [
          {
            "in": "path",
            "name": "networkId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "vertexId",
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "duplicateId",
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      },
      "get": {
        "tags": [
          "Graph"
        ],
        "summary": "List duplicates",
        "operationId": "Graph_ListDuplicates",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "networkId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DuplicateResult"
              }
            }
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/graph/{networkId}/cache": {
      "delete": {
        "tags": [
          "Graph"
        ],
        "summary": "Clear cache",
        "operationId": "Graph_ClearCache",
        "parameters": [
          {
            "in": "path",
            "name": "networkId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/mailing/{networkId}/templates": {
      "get": {
        "tags": [
          "Mailing"
        ],
        "summary": "Templates",
        "operationId": "Mailing_GetTemplates",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "networkId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EmailTemplateResult"
              }
            }
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      },
      "post": {
        "tags": [
          "Mailing"
        ],
        "summary": "New template",
        "operationId": "Mailing_NewTemplate",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "networkId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/mailing/{networkId}/templates/{templateName}": {
      "get": {
        "tags": [
          "Mailing"
        ],
        "summary": "Get built-in template text",
        "operationId": "Mailing_GetDefaultTemplate",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "networkId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "path",
            "name": "templateName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/mailing/templates/{templateId}": {
      "delete": {
        "tags": [
          "Mailing"
        ],
        "summary": "Delete template",
        "operationId": "Mailing_DeleteTemplate",
        "parameters": [
          {
            "in": "path",
            "name": "templateId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      },
      "get": {
        "tags": [
          "Mailing"
        ],
        "summary": "Template code",
        "operationId": "Mailing_GetTemplateCode",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "templateId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CodeResult"
            }
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      },
      "post": {
        "tags": [
          "Mailing"
        ],
        "summary": "Update template code",
        "operationId": "Mailing_UpdateTemplateCode",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "templateId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Syntax error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/mailing/{networkId}/templates/{template}/render": {
      "post": {
        "tags": [
          "Mailing"
        ],
        "summary": "Render template",
        "operationId": "Mailing_RenderTemplate",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "networkId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "path",
            "name": "template",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/RenderedEmailModel"
            }
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/mailing/send-invites": {
      "post": {
        "tags": [
          "Mailing"
        ],
        "summary": "Send mailing",
        "description": "Sends emails",
        "operationId": "Mailing_SendEmails",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/SendInvitationEmailsCommand"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Success",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/mailing/settings/{networkId}": {
      "get": {
        "tags": [
          "Mailing"
        ],
        "summary": "Notification settings",
        "operationId": "Mailing_GetSettings",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "networkId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "boolean"
              }
            }
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/mailing/settings": {
      "post": {
        "tags": [
          "Mailing"
        ],
        "summary": "Update notification settings",
        "operationId": "Mailing_UpdateSettings",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/UpdateEmailNotificationSettingCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "boolean"
              }
            }
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/members": {
      "post": {
        "tags": [
          "Members"
        ],
        "summary": "List",
        "operationId": "Members_List",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "networkId",
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "emailTemplate",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NetworkMemberResult"
              }
            }
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      },
      "delete": {
        "tags": [
          "Members"
        ],
        "summary": "Delete",
        "operationId": "Members_Delete",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/DeleteNetworkAccountsCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/members/validate": {
      "post": {
        "tags": [
          "Members"
        ],
        "summary": "Validate invitations",
        "operationId": "Members_Validate",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/ValidateInvitationsCommand"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Success",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/members/invite": {
      "post": {
        "tags": [
          "Members"
        ],
        "summary": "Invite",
        "description": "Adds users, creates vertices and sends invitation emails",
        "operationId": "Members_Invite",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/InviteMembersCommand"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Success",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/members/create": {
      "post": {
        "tags": [
          "Members"
        ],
        "summary": "Create account",
        "description": "Adds account for an existing vertex",
        "operationId": "Members_Create",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/AddOrUpdateNetworkAccountCommand"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Success",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/members/roles": {
      "post": {
        "tags": [
          "Members"
        ],
        "summary": "Change roles",
        "operationId": "Members_ChangeRoles",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/ChangeMembersRoleCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/members/groups": {
      "post": {
        "tags": [
          "Members"
        ],
        "summary": "Change groups",
        "operationId": "Members_ChangeGroups",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/ChangeMembersGroupAccessCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      },
      "get": {
        "tags": [
          "Members"
        ],
        "summary": "list member groups access",
        "operationId": "Members_GetGroups",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "networkId",
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "userName",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NetworkMemberGroupAccessResult"
              }
            }
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/modules/{networkId}": {
      "get": {
        "tags": [
          "Modules"
        ],
        "summary": "List modules",
        "operationId": "Modules_All",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "networkId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ModuleResult"
              }
            }
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/modules/{networkId}/{moduleId}": {
      "post": {
        "tags": [
          "Modules"
        ],
        "summary": "Import module",
        "operationId": "Modules_Import",
        "parameters": [
          {
            "in": "path",
            "name": "networkId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "path",
            "name": "moduleId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      },
      "put": {
        "tags": [
          "Modules"
        ],
        "summary": "Update module",
        "operationId": "Modules_Update",
        "parameters": [
          {
            "in": "path",
            "name": "networkId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "path",
            "name": "moduleId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      },
      "delete": {
        "tags": [
          "Modules"
        ],
        "summary": "Remove module",
        "operationId": "Modules_UnImport",
        "parameters": [
          {
            "in": "path",
            "name": "networkId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "path",
            "name": "moduleId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/perspective/schema/{perspectiveId}": {
      "post": {
        "tags": [
          "Perspective"
        ],
        "summary": "Schema",
        "operationId": "Perspective_Schema",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "perspectiveId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "type": "object",
              "additionalProperties": {}
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PerspectiveSchema"
            }
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/perspective/responses/{uriPrefix}": {
      "get": {
        "tags": [
          "Perspective"
        ],
        "summary": "Profile survey responses",
        "operationId": "Perspective_GetResponses",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "uriPrefix",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "additionalProperties": {}
            }
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/perspective/responses/{questionUri}": {
      "put": {
        "tags": [
          "Perspective"
        ],
        "summary": "Save profile survey response",
        "operationId": "Perspective_SaveResponse",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "questionUri",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/perspective/members/{perspectiveId}/search/{edgeName}": {
      "get": {
        "tags": [
          "Perspective"
        ],
        "summary": "Search members",
        "description": "search parameter is optional",
        "operationId": "Perspective_GetMembers",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "perspectiveId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "path",
            "name": "edgeName",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "search",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PropertyVertexModel"
              }
            }
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/perspective/members/{perspectiveId}/is-connected/{memberId}": {
      "post": {
        "tags": [
          "Perspective"
        ],
        "summary": "Is connected with",
        "operationId": "Perspective_IsConnected",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "perspectiveId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "path",
            "name": "memberId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RelationshipResult"
              }
            }
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/perspective/members/{member}/relationship/{edgeUri}": {
      "post": {
        "tags": [
          "Perspective"
        ],
        "summary": "Save relationship",
        "description": "Create if not exists",
        "operationId": "Perspective_SaveRelationship",
        "parameters": [
          {
            "in": "path",
            "name": "member",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "path",
            "name": "edgeUri",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      },
      "delete": {
        "tags": [
          "Perspective"
        ],
        "summary": "Delete relationship",
        "operationId": "Perspective_DeleteRelationship",
        "parameters": [
          {
            "in": "path",
            "name": "member",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "path",
            "name": "edgeUri",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted"
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/perspective/members/{email}/relationship/{edgeUri}": {
      "put": {
        "tags": [
          "Perspective"
        ],
        "summary": "Invite relationship",
        "description": "Create relationship and send invitation email",
        "operationId": "Perspective_InviteRelationship",
        "parameters": [
          {
            "in": "path",
            "name": "email",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "edgeUri",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "inviteeName",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/perspective/members/{member}/responses/{perspectiveId}/{edgeName}": {
      "get": {
        "tags": [
          "Perspective"
        ],
        "summary": "Relationship details",
        "operationId": "Perspective_GetRelationshipDetails",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "member",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "path",
            "name": "perspectiveId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "path",
            "name": "edgeName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/RelationshipDetailsModel"
            }
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/perspective/members/{member}/responses/{questionUri}": {
      "put": {
        "tags": [
          "Perspective"
        ],
        "summary": "Save relationship details",
        "operationId": "Perspective_SaveRelationshipDetails",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "member",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "path",
            "name": "questionUri",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/privacy/{networkId}/consents": {
      "get": {
        "tags": [
          "Privacy"
        ],
        "summary": "List consents",
        "operationId": "Privacy_ListConsents",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "networkId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PrivacyConsentResult"
              }
            }
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      },
      "delete": {
        "tags": [
          "Privacy"
        ],
        "summary": "Revoke consents",
        "operationId": "Privacy_RevokeConsents",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "networkId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/privacy/{networkId}/report": {
      "post": {
        "tags": [
          "Privacy"
        ],
        "summary": "Privacy report",
        "operationId": "Privacy_PrivacyReport",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "networkId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "userName",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PrivacyReportResult"
            }
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/privacy/{networkId}/connected-apps": {
      "get": {
        "tags": [
          "Privacy"
        ],
        "summary": "Connected apps",
        "operationId": "Privacy_ConnectedApps",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "networkId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ConnectedAppSettingResult"
              }
            }
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/privacy/{networkId}/connected-apps/{dataSourceId}": {
      "post": {
        "tags": [
          "Privacy"
        ],
        "summary": "Update app setting",
        "operationId": "Privacy_UpdateConnectedAppsSetting",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "networkId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "path",
            "name": "dataSourceId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "enabled",
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ConnectedAppSettingResult"
              }
            }
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/report/values": {
      "post": {
        "tags": [
          "Report"
        ],
        "summary": "Read report section",
        "operationId": "Report_MetricValues",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/PerspectiveMetricsQuery"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PerspectiveMetricsResult"
            }
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/report/history": {
      "post": {
        "tags": [
          "Report"
        ],
        "summary": "Read metric history",
        "operationId": "Report_MetricHistory",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/MetricHistoryQuery"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/MetricValueResult"
                }
              }
            }
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/report/related": {
      "post": {
        "tags": [
          "Report"
        ],
        "summary": "Related metrics section",
        "operationId": "Report_MetricRelatedValues",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/MetricRelatedQuery"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/MetricRelatedValueResult"
                }
              }
            }
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/report/import-metrics/{networkId}": {
      "post": {
        "tags": [
          "Report"
        ],
        "summary": "Import metrics from file",
        "description": "App_Data/import_data.csv",
        "operationId": "Report_Sync",
        "parameters": [
          {
            "in": "path",
            "name": "networkId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/report/import-related/{networkId}": {
      "post": {
        "tags": [
          "Report"
        ],
        "summary": "Import related metrics from file",
        "description": "App_Data/import_related.csv",
        "operationId": "Report_SyncRelated",
        "parameters": [
          {
            "in": "path",
            "name": "networkId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/roles": {
      "get": {
        "tags": [
          "Roles"
        ],
        "summary": "List",
        "operationId": "Roles_List",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "networkId",
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/NetworkRolesResult"
            }
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      },
      "post": {
        "tags": [
          "Roles"
        ],
        "summary": "Add",
        "operationId": "Roles_Add",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/AddRoleCommand"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/roles/{roleId}": {
      "put": {
        "tags": [
          "Roles"
        ],
        "summary": "Update",
        "operationId": "Roles_Update",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "roleId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/UpdateRoleCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      },
      "delete": {
        "tags": [
          "Roles"
        ],
        "summary": "Delete",
        "operationId": "Roles_Delete",
        "parameters": [
          {
            "in": "path",
            "name": "roleId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/roles/{roleId}/{resourceId}": {
      "post": {
        "tags": [
          "Roles"
        ],
        "summary": "Add permission",
        "operationId": "Roles_AddPermission",
        "parameters": [
          {
            "in": "path",
            "name": "roleId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "path",
            "name": "resourceId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      },
      "delete": {
        "tags": [
          "Roles"
        ],
        "summary": "Delete permission",
        "operationId": "Roles_DeletePermission",
        "parameters": [
          {
            "in": "path",
            "name": "roleId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "path",
            "name": "resourceId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/search/query": {
      "get": {
        "tags": [
          "Search"
        ],
        "summary": "Anything",
        "description": "search parameter is optional",
        "operationId": "Search_Query",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "networkId",
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "search",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CombinedSearchResult"
              }
            }
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/search/vertices": {
      "get": {
        "tags": [
          "Search"
        ],
        "summary": "Vertices",
        "description": "search parameter is optional",
        "operationId": "Search_QueryVertices",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "networkId",
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "search",
            "type": "string"
          },
          {
            "in": "query",
            "name": "skip",
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          {
            "in": "query",
            "name": "take",
            "type": "integer",
            "format": "int32",
            "default": 10
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CombinedSearchResult"
              }
            }
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/search/facets": {
      "get": {
        "tags": [
          "Search"
        ],
        "summary": "Facets",
        "description": "search parameter is optional",
        "operationId": "Search_QueryFacets",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "networkId",
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "search",
            "type": "string"
          },
          {
            "in": "query",
            "name": "skip",
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          {
            "in": "query",
            "name": "take",
            "type": "integer",
            "format": "int32",
            "default": 10
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CombinedSearchResult"
              }
            }
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/search/groups": {
      "get": {
        "tags": [
          "Search"
        ],
        "summary": "Groups",
        "description": "search parameter is optional",
        "operationId": "Search_QueryGroups",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "networkId",
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "search",
            "type": "string"
          },
          {
            "in": "query",
            "name": "skip",
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          {
            "in": "query",
            "name": "take",
            "type": "integer",
            "format": "int32",
            "default": 10
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CombinedSearchResult"
              }
            }
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/settings/application": {
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "Application settings",
        "operationId": "Settings_Application",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApplicationSettingsResult"
            }
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/settings/setup-application": {
      "post": {
        "tags": [
          "Settings"
        ],
        "summary": "Setup application with token based authentication",
        "description": "Creates a first user and configures first site. Can't be executed if any users are present in the db.",
        "operationId": "Settings_InternetApplicationSetup",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/ApplicationSetupCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/settings/setup-ad-application": {
      "post": {
        "tags": [
          "Settings"
        ],
        "summary": "Setup application with windows authentication (n/a)",
        "description": "Creates a first user and configures first site. Can't be executed if any users are present in the db.<br/><i>Not available in Token authentication mode</i>",
        "operationId": "Settings_ActiveDirectoryApplicationSetup",
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/settings/sync": {
      "post": {
        "tags": [
          "Settings"
        ],
        "summary": "Add sync api user",
        "operationId": "Settings_CreateSyncApiUser",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/AddSyncApiUserCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      },
      "delete": {
        "tags": [
          "Settings"
        ],
        "summary": "Delete sync api user",
        "operationId": "Settings_DeleteSyncApiUser",
        "parameters": [
          {
            "in": "query",
            "name": "userName",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/settings/sites": {
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "List configured sites",
        "operationId": "Settings_Sites",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SiteResult"
              }
            }
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      },
      "put": {
        "tags": [
          "Settings"
        ],
        "summary": "Create a new site",
        "operationId": "Settings_NewSite",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          "400": {
            "description": "Syntax error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      },
      "delete": {
        "tags": [
          "Settings"
        ],
        "summary": "Delete site",
        "operationId": "Settings_DeleteSite",
        "parameters": [
          {
            "in": "query",
            "name": "siteId",
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Site in use"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/settings/sites/{siteId}": {
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "Site settings",
        "operationId": "Settings_GetSiteCode",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "siteId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CodeResult"
            }
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      },
      "post": {
        "tags": [
          "Settings"
        ],
        "summary": "Update site settings",
        "operationId": "Settings_UpdateSiteCode",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "siteId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Syntax error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/settings/health": {
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "App health",
        "operationId": "Settings_Health",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Healthy",
            "schema": {
              "$ref": "#/definitions/ApplicationHealthResult"
            }
          },
          "400": {
            "description": "Unhealthy",
            "schema": {
              "$ref": "#/definitions/ApplicationHealthResult"
            }
          },
          "500": {
            "description": "Seriously unhealthy"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/sync/demo/{networkId}": {
      "put": {
        "tags": [
          "SyncDemo"
        ],
        "summary": "Generate demo data",
        "operationId": "SyncDemo_Generate",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "networkId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/sync/hashed/source": {
      "put": {
        "tags": [
          "SyncHashed"
        ],
        "summary": "Add connector",
        "description": "Add hashed data source connector",
        "operationId": "SyncHashed_Add",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/AddHashedDataSourceCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      },
      "delete": {
        "tags": [
          "SyncHashed"
        ],
        "summary": "Delete connector",
        "description": "Delete hashed data source connector",
        "operationId": "SyncHashed_Delete",
        "parameters": [
          {
            "in": "query",
            "name": "serviceToken",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/sync/hashed/token": {
      "post": {
        "tags": [
          "SyncHashed"
        ],
        "summary": "New Token",
        "description": "Generates short lived access token",
        "operationId": "SyncHashed_Token",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/AddServiceTokenCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      },
      "get": {
        "tags": [
          "SyncHashed"
        ],
        "summary": "Validate service token",
        "operationId": "SyncHashed_Query",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "serviceToken",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ServiceResult"
            }
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/sync/hashed/interactions": {
      "post": {
        "tags": [
          "SyncHashed"
        ],
        "summary": "Sync interactions",
        "description": "Sync interactions between nodes in graph",
        "operationId": "SyncHashed_SyncInteractions",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/SyncHashedInteractionsCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/sync/hashed/entities": {
      "post": {
        "tags": [
          "SyncHashed"
        ],
        "summary": "Sync entities",
        "description": "Sync nodes in graph.\r\nKeys, Groups, Props should be hashed or bucketed befored sending",
        "operationId": "SyncHashed_SyncEntities",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/SyncHashedEntitesCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/sync/hashed/groups": {
      "post": {
        "tags": [
          "SyncHashed"
        ],
        "summary": "Sync groups",
        "description": "Sync group names and hierarchy for reports available in user interface",
        "operationId": "SyncHashed_SyncGroups",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/SyncHashedGroupStructureCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/sync/hashed/users": {
      "post": {
        "tags": [
          "SyncHashed"
        ],
        "summary": "Sync users",
        "description": "Syncs not hashed list of users that might have access to the application\r\n(Permissions are to be assigned by the administrator)",
        "operationId": "SyncHashed_SyncUsers",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/SyncUsersCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/sync/hashed/start": {
      "post": {
        "tags": [
          "SyncHashed"
        ],
        "summary": "Sync started",
        "description": "Connector should call this endpoint when starting synchronization job",
        "operationId": "SyncHashed_ReportStart",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/ReportSyncStartedCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/sync/hashed/completed": {
      "post": {
        "tags": [
          "SyncHashed"
        ],
        "summary": "Sync completed",
        "description": "Connector should call this endpoint when synchronization has completed or failed",
        "operationId": "SyncHashed_ReportCompleted",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/ReportSyncCompletedCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/sync/hashed/settings": {
      "post": {
        "tags": [
          "SyncHashed"
        ],
        "summary": "Settings",
        "description": "Returns synchronization settings common for all connectors",
        "operationId": "SyncHashed_Settings",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "serviceToken",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/HashedDataSourceSettingsResult"
            }
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/sync/hashed/retry": {
      "post": {
        "tags": [
          "SyncHashed"
        ],
        "summary": "Retry sync",
        "operationId": "SyncHashed_Retry",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/RetryProcessingNetworkDataCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/sync/hashed/retry-processing": {
      "post": {
        "tags": [
          "SyncHashed"
        ],
        "summary": "Publish processing requests",
        "operationId": "SyncHashed_RetryProcessing",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/PublishProcessingRequestCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/sync/json": {
      "put": {
        "tags": [
          "SyncJson"
        ],
        "summary": "Add source",
        "operationId": "SyncJson_AddSource",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/SyncJsonAddSourceCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/sync/json/validate": {
      "post": {
        "tags": [
          "SyncJson"
        ],
        "summary": "Validate",
        "operationId": "SyncJson_Validate",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/SyncJsonValidateDataCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/sync/json/apply": {
      "post": {
        "tags": [
          "SyncJson"
        ],
        "summary": "Apply changes",
        "operationId": "SyncJson_ApplyChanges",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/SyncJsonApplyChangesCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/sync/status/{networkId}/overview": {
      "post": {
        "tags": [
          "SyncStatus"
        ],
        "summary": "Get status",
        "operationId": "SyncStatus_GetStatus",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "networkId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SyncStatusResult"
            }
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/sync/status/{networkId}/incoming/process": {
      "post": {
        "tags": [
          "SyncStatus"
        ],
        "summary": "Process incoming",
        "operationId": "SyncStatus_ProcessIncoming",
        "parameters": [
          {
            "in": "path",
            "name": "networkId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/sync/status/{networkId}/incoming/discard": {
      "post": {
        "tags": [
          "SyncStatus"
        ],
        "summary": "Discard incoming",
        "operationId": "SyncStatus_DiscardIncoming",
        "parameters": [
          {
            "in": "path",
            "name": "networkId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/sync/status/{networkId}/sending/process": {
      "post": {
        "tags": [
          "SyncStatus"
        ],
        "summary": "Process sending",
        "operationId": "SyncStatus_ProcessSending",
        "parameters": [
          {
            "in": "path",
            "name": "networkId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/sync/status/{networkId}/sending/discard": {
      "post": {
        "tags": [
          "SyncStatus"
        ],
        "summary": "Discard sending",
        "operationId": "SyncStatus_DiscardSending",
        "parameters": [
          {
            "in": "path",
            "name": "networkId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/sync/status/snapshots": {
      "post": {
        "tags": [
          "SyncStatus"
        ],
        "summary": "Create snapshot",
        "operationId": "SyncStatus_SnapshotCreate",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/NetworkCreateFolderSnapshotCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      },
      "put": {
        "tags": [
          "SyncStatus"
        ],
        "summary": "Load snapshot",
        "operationId": "SyncStatus_SnapshotLoad",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/NetworkLoadFolderSnapshotCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/sync/status/snapshots/{networkId}": {
      "post": {
        "tags": [
          "SyncStatus"
        ],
        "summary": "Get snapshots",
        "operationId": "SyncStatus_SnapshotsList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "networkId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "dataFolder"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NetworkListFolderSnapshotResult"
              }
            }
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/sync/status/recalculate": {
      "post": {
        "tags": [
          "SyncStatus"
        ],
        "summary": "Recalculate metrics",
        "operationId": "SyncStatus_Recalculate",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/NetworkRecalculateMetricsCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/token": {
      "post": {
        "tags": [
          "Token"
        ],
        "summary": "Issue an access token",
        "operationId": "Token_GetToken",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "username",
            "type": "string"
          },
          {
            "in": "formData",
            "name": "password",
            "type": "string"
          },
          {
            "in": "formData",
            "name": "refreshToken",
            "type": "string"
          },
          {
            "in": "formData",
            "name": "grant_type",
            "type": "string"
          },
          {
            "in": "formData",
            "name": "client_id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Logged in"
          },
          "400": {
            "description": "Invalid credentials"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/token/external": {
      "get": {
        "tags": [
          "Token"
        ],
        "operationId": "Token_SignIn",
        "parameters": [
          {
            "in": "query",
            "name": "provider",
            "type": "string"
          },
          {
            "in": "query",
            "name": "loginHint",
            "type": "string"
          },
          {
            "in": "query",
            "name": "networkId",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    },
    "/api/vertices/{networkId}": {
      "post": {
        "tags": [
          "Vertices"
        ],
        "summary": "List",
        "operationId": "Vertices_List",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "networkId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NetworkVertexResult"
              }
            }
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      },
      "delete": {
        "tags": [
          "Vertices"
        ],
        "summary": "Delete",
        "operationId": "Vertices_Delete",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "networkId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "type": "array",
              "items": {
                "format": "uuid",
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Model validation error"
          },
          "429": {
            "description": "API calls quota exceeded"
          }
        }
      }
    }
  },
  "definitions": {
    "ActivityResult": {
      "type": "object",
      "properties": {
        "ago": {
          "type": "string"
        },
        "userName": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "AddConnectorCommand": {
      "type": "object",
      "properties": {
        "networkId": {
          "format": "uuid",
          "type": "string"
        },
        "dataSourceId": {
          "description": "DataSource or Service identifier",
          "type": "string"
        },
        "name": {
          "description": "Optional user given name for the connector",
          "type": "string"
        },
        "serviceFlags": {
          "$ref": "#/definitions/ServiceFlags"
        },
        "interactionConnectorConfig": {
          "$ref": "#/definitions/SyncInteractionConfig"
        },
        "entityConnectorConfig": {
          "$ref": "#/definitions/SyncJsonConfig"
        },
        "userName": {
          "description": "Optional username to be used by the connector (creates user and adds SyncApiRole)",
          "type": "string"
        }
      }
    },
    "AddHashedDataSourceCommand": {
      "type": "object",
      "properties": {
        "networkId": {
          "format": "uuid",
          "type": "string"
        },
        "dataSourceId": {
          "description": "DataSource or Service identifier",
          "type": "string"
        },
        "name": {
          "description": "Optional user given name for the connector",
          "type": "string"
        }
      }
    },
    "AddOrUpdateNetworkAccountCommand": {
      "type": "object",
      "properties": {
        "networkId": {
          "format": "uuid",
          "type": "string"
        },
        "vertexId": {
          "format": "uuid",
          "type": "string"
        },
        "userName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "prevUserName": {
          "type": "string"
        },
        "prevEmail": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "items": {
            "format": "uuid",
            "type": "string"
          }
        }
      }
    },
    "AddRoleCommand": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "ldapGroups": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "order": {
          "format": "int32",
          "type": "integer"
        },
        "networkId": {
          "format": "uuid",
          "type": "string"
        }
      }
    },
    "AddServiceTokenCommand": {
      "type": "object",
      "properties": {
        "networkId": {
          "format": "uuid",
          "type": "string"
        },
        "connectorId": {
          "format": "uuid",
          "type": "string"
        },
        "expiresAfterSec": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "AddSignInProviderCommand": {
      "type": "object",
      "properties": {
        "networkId": {
          "format": "uuid",
          "type": "string"
        },
        "authority": {
          "type": "string"
        }
      }
    },
    "AddSyncApiUserCommand": {
      "type": "object",
      "properties": {
        "userName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "AdminAssetsResult": {
      "type": "object",
      "properties": {
        "networks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NetworkAssetResult"
          }
        },
        "sites": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SiteResult"
          }
        }
      }
    },
    "AggregateEnum": {
      "enum": [
        "Month",
        "Weekday",
        "Hour",
        "Custom"
      ],
      "type": "string"
    },
    "ApplicationHealthResult": {
      "type": "object",
      "properties": {
        "healthy": {
          "type": "boolean"
        },
        "db": {
          "type": "string"
        },
        "fs": {
          "type": "string"
        },
        "layout": {
          "type": "string"
        }
      }
    },
    "ApplicationSettingsResult": {
      "type": "object",
      "properties": {
        "authenticationMode": {
          "$ref": "#/definitions/AuthenticationModeResult"
        },
        "language": {
          "type": "string"
        },
        "instrumentationKey": {
          "type": "string"
        },
        "syncConfig": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ApplicationSetupCommand": {
      "type": "object",
      "properties": {
        "userName": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "siteSettings": {
          "$ref": "#/definitions/SiteSettingsResult"
        }
      }
    },
    "AssignmentSchema": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {}
      }
    },
    "AuthenticationModeResult": {
      "enum": [
        "Windows",
        "BearerToken"
      ],
      "type": "string"
    },
    "AuthoritySettings": {
      "type": "object",
      "properties": {
        "signIn": {
          "type": "string"
        }
      }
    },
    "AuthorizationSettings": {
      "type": "object",
      "properties": {
        "authority": {
          "type": "string"
        }
      }
    },
    "AuthorizationSiteSettings": {
      "type": "object",
      "properties": {
        "authorities": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/AuthoritySettings"
          }
        }
      }
    },
    "BenchmarkModel": {
      "type": "object",
      "properties": {
        "observedMin": {
          "format": "double",
          "type": "number"
        },
        "observedMax": {
          "format": "double",
          "type": "number"
        },
        "benchmarkMin": {
          "format": "double",
          "type": "number"
        },
        "benchmarkMax": {
          "format": "double",
          "type": "number"
        },
        "benchmarkType": {
          "$ref": "#/definitions/BenchmarkTypeEnum"
        }
      }
    },
    "BenchmarkTypeEnum": {
      "enum": [
        "AspirationalValue"
      ],
      "type": "string"
    },
    "Breadcrumb": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "perspectiveId": {
          "format": "uuid",
          "type": "string"
        },
        "category": {
          "type": "string"
        },
        "memberId": {
          "type": "string"
        },
        "reportId": {
          "type": "string"
        },
        "groupId": {
          "type": "string"
        },
        "pageNo": {
          "format": "int32",
          "type": "integer"
        },
        "sectionNo": {
          "format": "int32",
          "type": "integer"
        },
        "sections": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Breadcrumb"
          }
        }
      }
    },
    "ChangeMembersGroupAccessCommand": {
      "type": "object",
      "properties": {
        "networkId": {
          "format": "uuid",
          "type": "string"
        },
        "userNames": {
          "uniqueItems": true,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "groupAccessToAdd": {
          "uniqueItems": true,
          "type": "array",
          "items": {
            "format": "uuid",
            "type": "string"
          }
        },
        "groupAccessToRemove": {
          "uniqueItems": true,
          "type": "array",
          "items": {
            "format": "uuid",
            "type": "string"
          }
        }
      }
    },
    "ChangeMembersRoleCommand": {
      "type": "object",
      "properties": {
        "networkId": {
          "format": "uuid",
          "type": "string"
        },
        "userNames": {
          "uniqueItems": true,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "networkRolesToAdd": {
          "uniqueItems": true,
          "type": "array",
          "items": {
            "format": "uuid",
            "type": "string"
          }
        },
        "networkRolesToRemove": {
          "uniqueItems": true,
          "type": "array",
          "items": {
            "format": "uuid",
            "type": "string"
          }
        }
      }
    },
    "ChangePasswordCommand": {
      "required": [
        "currentPassword",
        "newPassword"
      ],
      "type": "object",
      "properties": {
        "currentPassword": {
          "type": "string"
        },
        "newPassword": {
          "type": "string"
        }
      }
    },
    "CodeResult": {
      "type": "object",
      "properties": {
        "codeId": {
          "format": "uuid",
          "type": "string"
        },
        "assetId": {
          "format": "uuid",
          "type": "string"
        },
        "sourceText": {
          "type": "string"
        },
        "versionHistory": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CodeVersionResult"
          }
        }
      }
    },
    "CodeVersionResult": {
      "type": "object",
      "properties": {
        "timeStamp": {
          "format": "date-time",
          "type": "string"
        },
        "codeId": {
          "format": "uuid",
          "type": "string"
        },
        "modifiedBy": {
          "type": "string"
        }
      }
    },
    "CombinedSearchResult": {
      "type": "object",
      "properties": {
        "perspectiveId": {
          "format": "uuid",
          "type": "string"
        },
        "perspectiveName": {
          "type": "string"
        },
        "perspectiveIcon": {
          "type": "string"
        },
        "vertex": {
          "$ref": "#/definitions/VertexSearchResult"
        },
        "facet": {
          "$ref": "#/definitions/FacetSearchResult"
        },
        "group": {
          "$ref": "#/definitions/GroupSearchResult"
        }
      }
    },
    "ComponentSchema": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "statements": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StatementSchema"
          }
        }
      }
    },
    "ConditionalSchema": {
      "type": "object",
      "properties": {
        "left": {},
        "right": {},
        "condidtion": {
          "$ref": "#/definitions/ConditionalSchemaConditionEnum"
        }
      }
    },
    "ConditionalSchemaConditionEnum": {
      "enum": [
        "Equals",
        "NotEquals"
      ],
      "type": "string"
    },
    "ConfirmEmailCommand": {
      "required": [
        "token"
      ],
      "type": "object",
      "properties": {
        "userId": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "token": {
          "type": "string"
        },
        "apiClientId": {
          "type": "string"
        }
      }
    },
    "ConnectedAppSettingResult": {
      "type": "object",
      "properties": {
        "dataSourceId": {
          "type": "string"
        },
        "edgeNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "enabled": {
          "type": "boolean"
        }
      }
    },
    "ConnectorDetailsResult": {
      "type": "object",
      "properties": {
        "networkId": {
          "format": "uuid",
          "type": "string"
        },
        "connectorId": {
          "format": "uuid",
          "type": "string"
        },
        "dataSourceId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "jobStarted": {
          "format": "date-time",
          "type": "string"
        },
        "jobCompleted": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "ConnectorPrivacyFilterResult": {
      "type": "object",
      "properties": {
        "privacyModel": {
          "$ref": "#/definitions/PrivacyModelEnum"
        },
        "usernamesHashed": {
          "description": "SHA256 (Username)\r\nHashed usernames (hex encoding) of user that opted-in or opted-out to sync\r\ndepending on privacy model",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ConnectorResult": {
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "dataSourceId": {
          "type": "string"
        }
      }
    },
    "ConnectorsCustomAttributesSettings": {
      "type": "object",
      "properties": {
        "group": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "prop": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ConnectorsCustomRelationshipSettings": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "prop": {
          "type": "string"
        }
      }
    },
    "ConnectorsSettings": {
      "type": "object",
      "properties": {
        "whitelist": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "blacklist": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "customAttributes": {
          "$ref": "#/definitions/ConnectorsCustomAttributesSettings"
        },
        "customRelationships": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConnectorsCustomRelationshipSettings"
          }
        }
      }
    },
    "ConnectorValidUsersFilterResult": {
      "type": "object",
      "properties": {
        "usernamesHashed": {
          "description": "SHA256 (Username)\r\nHashed usernames (hex encoding) of user that opted-in or opted-out to sync\r\ndepending on privacy model",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ConvertInteractionsToRelationshipsCommand": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string"
        },
        "interactionsWindowStart": {
          "format": "date-time",
          "type": "string"
        },
        "interactionsWindowEnd": {
          "format": "date-time",
          "type": "string"
        },
        "edgeName": {
          "type": "string"
        },
        "requiredMutualInteractionsCount": {
          "format": "int32",
          "type": "integer"
        },
        "runInTransaction": {
          "type": "boolean"
        }
      }
    },
    "Coords": {
      "type": "object",
      "properties": {
        "x": {
          "format": "double",
          "type": "number"
        },
        "y": {
          "format": "double",
          "type": "number"
        }
      }
    },
    "DataProcessingEvent": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "userName": {
          "type": "string"
        },
        "timeStamp": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "DeleteConnectorCommand": {
      "type": "object",
      "properties": {
        "networkId": {
          "format": "uuid",
          "type": "string"
        },
        "connectorId": {
          "format": "uuid",
          "type": "string"
        }
      }
    },
    "DeleteNetworkAccountsCommand": {
      "description": "Delete network account associated with the username\r\n- and vertex if no other account is associated with it\r\n- and application user if no other vertices is associated with it",
      "type": "object",
      "properties": {
        "networkId": {
          "format": "uuid",
          "type": "string"
        },
        "userNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "DuplicateResult": {
      "type": "object",
      "properties": {
        "vertex": {
          "$ref": "#/definitions/PropertyVertexModel"
        },
        "duplicates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PropertyVertexModel"
          }
        }
      }
    },
    "EmailSettings": {
      "type": "object",
      "properties": {
        "sender": {
          "$ref": "#/definitions/SenderSettings"
        },
        "mailGun": {
          "$ref": "#/definitions/MailGunSettings"
        },
        "smtp": {
          "$ref": "#/definitions/SmtpSettings"
        },
        "footer": {
          "type": "string"
        }
      }
    },
    "EmailTemplateResult": {
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "subject": {
          "type": "string"
        },
        "locale": {
          "type": "string"
        }
      }
    },
    "FacetSearchResult": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "details": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "score": {
          "format": "double",
          "type": "number"
        }
      }
    },
    "GraphPerspectiveItemResult": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "page": {
          "format": "int32",
          "type": "integer"
        },
        "section": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "GraphPerspectiveMenuResult": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "perspectives": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GraphPerspectiveResult"
          }
        }
      }
    },
    "GraphPerspectiveResult": {
      "type": "object",
      "properties": {
        "perspectiveId": {
          "format": "uuid",
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "breadcrumb": {
          "type": "string"
        },
        "hint": {
          "type": "string"
        },
        "order": {
          "format": "int32",
          "type": "integer"
        },
        "icon": {
          "type": "string"
        },
        "linkUrl": {
          "type": "string"
        },
        "parent": {
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GraphPerspectiveItemResult"
          }
        }
      }
    },
    "GraphPerspectivesResult": {
      "type": "object",
      "properties": {
        "profile": {
          "$ref": "#/definitions/GraphPerspectiveResult"
        },
        "menu": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GraphPerspectiveMenuResult"
          }
        },
        "categories": {
          "description": "Perspectives with category field not referencing reports \r\nThese are used for facet search",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/GraphPerspectiveResult"
          }
        },
        "reportCategories": {
          "description": "All perspectives referencing reports with category field\r\nThese are used for report group search",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/GraphPerspectiveResult"
          }
        }
      }
    },
    "GroupSearchResult": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "details": {
          "type": "string"
        },
        "id": {
          "format": "uuid",
          "type": "string"
        },
        "score": {
          "format": "double",
          "type": "number"
        }
      }
    },
    "HashedDataSourceCustomAttributesSettingsResult": {
      "type": "object",
      "properties": {
        "group": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "prop": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "relationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/HashedDataSourceCustomRelationshipSettingsResult"
          }
        }
      }
    },
    "HashedDataSourceCustomRelationshipSettingsResult": {
      "type": "object",
      "properties": {
        "propName": {
          "type": "string"
        },
        "relationshipName": {
          "type": "string"
        }
      }
    },
    "HashedDataSourceSettingsResult": {
      "type": "object",
      "properties": {
        "whitelist": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "blacklist": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "customAttributes": {
          "$ref": "#/definitions/HashedDataSourceCustomAttributesSettingsResult"
        }
      }
    },
    "HashedEntity": {
      "type": "object",
      "properties": {
        "changeDate": {
          "format": "date-time",
          "type": "string"
        },
        "ids": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "groups": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "props": {
          "type": "object",
          "additionalProperties": {}
        },
        "relationships": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/HashedEntityRelationship"
          }
        }
      }
    },
    "HashedEntityRelationship": {
      "type": "object",
      "properties": {
        "relationshipName": {
          "type": "string"
        },
        "targetIds": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "HashedGroup": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "category": {
          "type": "string"
        },
        "parentId": {
          "type": "string"
        }
      }
    },
    "HashedInteraction": {
      "description": "",
      "type": "object",
      "properties": {
        "interactionId": {
          "type": "string"
        },
        "when": {
          "format": "date-time",
          "type": "string"
        },
        "sourceIds": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "targetIds": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "eventId": {
          "type": "string"
        },
        "parentEventId": {
          "type": "string"
        },
        "channelId": {
          "type": "string"
        },
        "durationMinutes": {
          "format": "int32",
          "type": "integer"
        },
        "label": {
          "uniqueItems": true,
          "type": "array",
          "items": {
            "$ref": "#/definitions/HashedInteractionLabel"
          }
        }
      }
    },
    "HashedInteractionLabel": {
      "enum": [
        "Chat",
        "Email",
        "Meeting",
        "NewThread",
        "Reply",
        "Reaction",
        "RecurringDaily",
        "RecurringWeekly",
        "RecurringMonthly",
        "RecurringYearly"
      ],
      "type": "string"
    },
    "I18nSettings": {
      "type": "object",
      "properties": {
        "sites": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "IntegrationServiceSettings": {
      "type": "object",
      "properties": {
        "settings": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "IntegrationsSiteSettings": {
      "type": "object",
      "properties": {
        "services": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/IntegrationServiceSettings"
          }
        }
      }
    },
    "InteractionData": {
      "type": "object",
      "properties": {
        "when": {
          "format": "date-time",
          "type": "string"
        },
        "from": {
          "type": "string"
        },
        "to": {
          "type": "string"
        }
      }
    },
    "InvitationInfo": {
      "type": "object",
      "properties": {
        "networkName": {
          "description": "Name of the network the user has been invited to",
          "type": "string"
        },
        "networkId": {
          "format": "uuid",
          "type": "string"
        },
        "additionalTerms": {
          "type": "string"
        }
      }
    },
    "InvitationSettings": {
      "type": "object",
      "properties": {
        "requiredProps": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "InviteMembersCommand": {
      "type": "object",
      "properties": {
        "networkId": {
          "format": "uuid",
          "type": "string"
        },
        "roles": {
          "type": "array",
          "items": {
            "format": "uuid",
            "type": "string"
          }
        },
        "invitations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MemberInvitationModel"
          }
        },
        "sendEmails": {
          "type": "boolean"
        }
      }
    },
    "ItemListItemSchema": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "statements": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StatementSchema"
          }
        }
      }
    },
    "ItemListSchema": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ItemListItemSchema"
          }
        }
      }
    },
    "JsonConnectorEntity": {
      "type": "object",
      "properties": {
        "changeDate": {
          "format": "date-time",
          "type": "string"
        },
        "userName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "props": {
          "type": "object",
          "additionalProperties": {}
        },
        "relationships": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/JsonConnectorRelationship"
          }
        }
      }
    },
    "JsonConnectorRelationship": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "targetUserName": {
          "type": "string"
        },
        "targetEmail": {
          "type": "string"
        },
        "targetProps": {
          "type": "object",
          "additionalProperties": {}
        }
      }
    },
    "KeyMatchingBehaviour": {
      "enum": [
        "MatchAllProps",
        "MatchAnyProps"
      ],
      "type": "string"
    },
    "LicenseInfo": {
      "type": "object",
      "properties": {
        "adminName": {
          "type": "string"
        },
        "adminEmail": {
          "type": "string"
        }
      }
    },
    "MailGunSettings": {
      "type": "object",
      "properties": {
        "apiKey": {
          "type": "string"
        },
        "domain": {
          "type": "string"
        }
      }
    },
    "MemberInvitationFailResolution": {
      "enum": [
        "OverrideData",
        "KeepExistingData",
        "IgnoreInvitation",
        "AddLoginToExistingAccount",
        "InviteMember"
      ],
      "type": "string"
    },
    "MemberInvitationModel": {
      "type": "object",
      "properties": {
        "userName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "props": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "failResolution": {
          "$ref": "#/definitions/MemberInvitationFailResolution"
        }
      }
    },
    "MetricActionConditionEnum": {
      "enum": [
        "OutsideRange",
        "BelowMin",
        "AboveMax",
        "Always"
      ],
      "type": "string"
    },
    "MetricActionModel": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "metricId": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "when": {
          "$ref": "#/definitions/MetricActionConditionEnum"
        },
        "conditionMet": {
          "type": "boolean"
        }
      }
    },
    "MetricHistoryQuery": {
      "type": "object",
      "properties": {
        "reportSectionPerspectiveId": {
          "format": "uuid",
          "description": "Perspective that represent report section",
          "type": "string"
        },
        "reportId": {
          "format": "uuid",
          "description": "Originating perspective to validate permissions to query report with the group provided",
          "type": "string"
        },
        "groupId": {
          "format": "uuid",
          "description": "A group to query values from",
          "type": "string"
        },
        "metrics": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "networkId": {
          "format": "uuid",
          "type": "string"
        },
        "aggregate": {
          "$ref": "#/definitions/AggregateEnum"
        }
      }
    },
    "MetricRelatedQuery": {
      "type": "object",
      "properties": {
        "reportSectionPerspectiveId": {
          "format": "uuid",
          "description": "Perspective that represent report section",
          "type": "string"
        },
        "reportId": {
          "format": "uuid",
          "description": "Originating perspective to validate permissions to query report with the group provided",
          "type": "string"
        },
        "groupId": {
          "format": "uuid",
          "description": "A group to query values from",
          "type": "string"
        },
        "metrics": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "networkId": {
          "format": "uuid",
          "type": "string"
        },
        "aggregate": {
          "$ref": "#/definitions/AggregateEnum"
        },
        "top": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "MetricRelatedValueResult": {
      "type": "object",
      "properties": {
        "period": {
          "type": "string"
        },
        "value": {
          "format": "double",
          "type": "number"
        },
        "relatedGroupId": {
          "format": "uuid",
          "type": "string"
        },
        "relatedGroupName": {
          "type": "string"
        },
        "hasAccess": {
          "type": "boolean"
        }
      }
    },
    "MetricValueResult": {
      "type": "object",
      "properties": {
        "period": {
          "type": "string"
        },
        "value": {
          "format": "double",
          "type": "number"
        },
        "change": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "ModuleResult": {
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "inUse": {
          "type": "boolean"
        }
      }
    },
    "ModuleSettings": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        }
      }
    },
    "NetworkActivityStatsResult": {
      "type": "object",
      "properties": {
        "period": {
          "type": "string"
        },
        "activeUsers": {
          "format": "int32",
          "type": "integer"
        },
        "activitiesPerUser": {
          "format": "int32",
          "type": "integer"
        },
        "totalUsers": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "NetworkAssetResult": {
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "settings": {
          "$ref": "#/definitions/NetworkSettings"
        },
        "permissions": {
          "uniqueItems": true,
          "type": "array",
          "items": {
            "format": "uuid",
            "type": "string"
          }
        },
        "perspectives": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PerspectiveResult"
          }
        },
        "connectors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConnectorResult"
          }
        },
        "emailTemplates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EmailTemplateResult"
          }
        },
        "hasGroups": {
          "type": "boolean"
        }
      }
    },
    "NetworkCreateFolderSnapshotCommand": {
      "type": "object",
      "properties": {
        "networkId": {
          "format": "uuid",
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "comment": {
          "type": "string"
        },
        "dataFolder": {
          "$ref": "#/definitions/SnapshotDataFolder"
        }
      }
    },
    "NetworkEdgeResult": {
      "type": "object",
      "properties": {
        "edgeId": {
          "format": "uuid",
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "sourceVertex": {
          "$ref": "#/definitions/PropertyVertexModel"
        },
        "targetVertex": {
          "$ref": "#/definitions/PropertyVertexModel"
        },
        "props": {
          "type": "object",
          "additionalProperties": {}
        }
      }
    },
    "NetworkListFolderSnapshotResult": {
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "type": "string"
        },
        "folder": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "comment": {
          "type": "string"
        },
        "timestamp": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "NetworkLoadFolderSnapshotCommand": {
      "type": "object",
      "properties": {
        "networkId": {
          "format": "uuid",
          "type": "string"
        },
        "snapshotId": {
          "format": "uuid",
          "type": "string"
        },
        "dataFolder": {
          "$ref": "#/definitions/SnapshotDataFolder"
        }
      }
    },
    "NetworkMemberGroupAccessResult": {
      "type": "object",
      "properties": {
        "hasAccess": {
          "type": "boolean"
        },
        "groupId": {
          "format": "uuid",
          "type": "string"
        },
        "groupName": {
          "type": "string"
        },
        "parentPath": {
          "type": "string"
        },
        "category": {
          "type": "string"
        }
      }
    },
    "NetworkMemberResult": {
      "type": "object",
      "properties": {
        "vertexId": {
          "format": "uuid",
          "type": "string"
        },
        "userName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "props": {
          "type": "object",
          "additionalProperties": {}
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "membershipStatus": {
          "type": "string"
        },
        "receivedEmail": {
          "type": "boolean"
        },
        "groups": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "readOnly": true
        }
      }
    },
    "NetworkPrivacyReportResult": {
      "type": "object",
      "properties": {
        "networkId": {
          "format": "uuid",
          "type": "string"
        },
        "networkName": {
          "type": "string"
        },
        "networkAdminName": {
          "type": "string"
        },
        "networkAdminEmail": {
          "type": "string"
        },
        "noPremissionsToViewData": {
          "type": "boolean"
        },
        "profile": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "contacts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StringStringKeyValuePair"
          }
        },
        "events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataProcessingEvent"
          }
        }
      }
    },
    "NetworkRecalculateMetricsCommand": {
      "type": "object",
      "properties": {
        "networkId": {
          "format": "uuid",
          "type": "string"
        },
        "startDate": {
          "format": "date-time",
          "type": "string"
        },
        "endDate": {
          "format": "date-time",
          "type": "string"
        },
        "processingCacheElements": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProcessingCacheElement"
          }
        }
      }
    },
    "NetworkRoleResult": {
      "type": "object",
      "properties": {
        "networkRoleId": {
          "format": "uuid",
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "ldapGroups": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "order": {
          "format": "int32",
          "type": "integer"
        },
        "permissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PermissionResult"
          }
        }
      }
    },
    "NetworkRolesResult": {
      "type": "object",
      "properties": {
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NetworkRoleResult"
          }
        },
        "allResources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Resource"
          }
        }
      }
    },
    "NetworkSettings": {
      "type": "object",
      "properties": {
        "networkId": {
          "format": "uuid",
          "type": "string"
        },
        "invitations": {
          "$ref": "#/definitions/InvitationSettings"
        },
        "profileCard": {
          "$ref": "#/definitions/ProfileCardSettings"
        },
        "i18n": {
          "$ref": "#/definitions/I18nSettings"
        },
        "module": {
          "$ref": "#/definitions/ModuleSettings"
        },
        "search": {
          "$ref": "#/definitions/SearchSettings"
        },
        "privacy": {
          "$ref": "#/definitions/PrivacySettings"
        },
        "authorization": {
          "$ref": "#/definitions/AuthorizationSettings"
        },
        "sync": {
          "$ref": "#/definitions/SyncSettings"
        },
        "connectors": {
          "$ref": "#/definitions/ConnectorsSettings"
        }
      }
    },
    "NetworkVertexResult": {
      "type": "object",
      "properties": {
        "vertexId": {
          "format": "uuid",
          "type": "string"
        },
        "userName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "membershipStatus": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "props": {
          "type": "object",
          "additionalProperties": {}
        }
      }
    },
    "PageSchema": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "statements": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StatementSchema"
          }
        },
        "sections": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SectionSchema"
          }
        }
      }
    },
    "PermissionResult": {
      "type": "object",
      "properties": {
        "resourceId": {
          "format": "uuid",
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "PerspectiveContext": {
      "type": "object",
      "properties": {
        "perspectiveId": {
          "format": "uuid",
          "type": "string"
        },
        "networkId": {
          "format": "uuid",
          "type": "string"
        },
        "locale": {
          "type": "string"
        },
        "breadcrumbs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Breadcrumb"
          }
        }
      }
    },
    "PerspectiveMetricResult": {
      "type": "object",
      "properties": {
        "metric": {
          "$ref": "#/definitions/ReportMetricModel"
        },
        "value": {
          "format": "double",
          "type": "number"
        },
        "prevValue": {
          "format": "double",
          "type": "number"
        },
        "benchmark": {
          "$ref": "#/definitions/BenchmarkModel"
        }
      }
    },
    "PerspectiveMetricsQuery": {
      "type": "object",
      "properties": {
        "sectionId": {
          "format": "uuid",
          "description": "Perspective that represent report section",
          "type": "string"
        },
        "reportId": {
          "format": "uuid",
          "description": "Originating perspective to validate permissions to query report with the group provided",
          "type": "string"
        },
        "groupId": {
          "format": "uuid",
          "description": "A group to query values from",
          "type": "string"
        },
        "aggregate": {
          "$ref": "#/definitions/AggregateEnum"
        },
        "networkId": {
          "format": "uuid",
          "type": "string"
        }
      }
    },
    "PerspectiveMetricsResult": {
      "type": "object",
      "properties": {
        "reportId": {
          "format": "uuid",
          "type": "string"
        },
        "reportDescription": {
          "type": "string"
        },
        "groupId": {
          "format": "uuid",
          "type": "string"
        },
        "groupName": {
          "type": "string"
        },
        "reportOverview": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReportOverviewSectionResult"
          }
        },
        "metrics": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PerspectiveMetricResult"
          }
        }
      }
    },
    "PerspectiveMetricValueResult": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "format": "double",
          "type": "number"
        }
      }
    },
    "PerspectiveResult": {
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "parent": {
          "type": "string"
        },
        "metric": {
          "$ref": "#/definitions/PerspectiveMetricValueResult"
        }
      }
    },
    "PerspectiveSchema": {
      "type": "object",
      "properties": {
        "context": {
          "$ref": "#/definitions/PerspectiveContext"
        },
        "metadata": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AssignmentSchema"
          }
        },
        "pages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PageSchema"
          }
        },
        "substitutions": {
          "type": "object",
          "additionalProperties": {}
        }
      }
    },
    "PrivacyConsentResult": {
      "type": "object",
      "properties": {
        "userName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "consentDateTime": {
          "format": "date-time",
          "type": "string"
        },
        "consentSourceIp": {
          "type": "string"
        },
        "consentStatus": {
          "$ref": "#/definitions/PrivacyConsentStatusEnum"
        }
      }
    },
    "PrivacyConsentStatusEnum": {
      "enum": [
        "Unknown",
        "Given",
        "Revoked"
      ],
      "type": "string"
    },
    "PrivacyModelEnum": {
      "enum": [
        "OptIn",
        "OptOut",
        "None"
      ],
      "type": "string"
    },
    "PrivacyReportResult": {
      "type": "object",
      "properties": {
        "consent": {
          "$ref": "#/definitions/PrivacyConsentResult"
        },
        "networkPrivacyReport": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NetworkPrivacyReportResult"
          }
        }
      }
    },
    "PrivacySettings": {
      "type": "object",
      "properties": {
        "hideUnregistered": {
          "type": "boolean"
        }
      }
    },
    "ProcessingCacheElement": {
      "enum": [
        "Resources",
        "Vertices",
        "VertexProps",
        "Edges",
        "Interactions"
      ],
      "type": "string"
    },
    "ProfileCardSettings": {
      "type": "object",
      "properties": {
        "labelProp": {
          "type": "string"
        },
        "photoProp": {
          "type": "string"
        },
        "detailsProp": {
          "type": "string"
        }
      }
    },
    "PropertyEdgeModel": {
      "type": "object",
      "properties": {
        "source": {
          "format": "int32",
          "type": "integer"
        },
        "target": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "props": {
          "type": "object",
          "additionalProperties": {}
        }
      }
    },
    "PropertyGraphModel": {
      "type": "object",
      "properties": {
        "vertices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PropertyVertexModel"
          }
        },
        "edges": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PropertyEdgeModel"
          }
        },
        "data": {
          "type": "object",
          "additionalProperties": {}
        }
      }
    },
    "PropertyVertexModel": {
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "type": "string"
        },
        "props": {
          "type": "object",
          "additionalProperties": {}
        }
      }
    },
    "PublishProcessingRequestCommand": {
      "type": "object",
      "properties": {
        "networkId": {
          "format": "uuid",
          "type": "string"
        },
        "startDate": {
          "format": "date-time",
          "type": "string"
        },
        "endDate": {
          "format": "date-time",
          "type": "string"
        },
        "flags": {
          "$ref": "#/definitions/PublishProcessingRequestFlags"
        }
      }
    },
    "PublishProcessingRequestFlags": {
      "enum": [
        "Default",
        "SplitMonthly",
        "ExcludeWeekdays",
        "ExcludeRelated",
        "ExcludeCompany",
        "ExcludeRoles"
      ],
      "type": "string"
    },
    "RegisterForDemoCommand": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "company": {
          "type": "string"
        },
        "phoneNumber": {
          "type": "string"
        }
      }
    },
    "RegisterUserCommand": {
      "required": [
        "email",
        "password"
      ],
      "type": "object",
      "properties": {
        "email": {
          "format": "email",
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "RegisterWithTokenCommand": {
      "required": [
        "password",
        "token"
      ],
      "type": "object",
      "properties": {
        "token": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "apiClientId": {
          "type": "string"
        }
      }
    },
    "RegistrationInfo": {
      "type": "object",
      "properties": {
        "avatarUrl": {
          "description": "Url to the user avatar thumbnail",
          "type": "string"
        }
      }
    },
    "RelationshipDetailsModel": {
      "type": "object",
      "properties": {
        "targetVertex": {
          "$ref": "#/definitions/PropertyVertexModel"
        },
        "edgeName": {
          "type": "string"
        },
        "edgeUri": {
          "type": "string"
        },
        "connected": {
          "type": "boolean"
        },
        "props": {
          "type": "object",
          "additionalProperties": {}
        }
      }
    },
    "RelationshipResult": {
      "type": "object",
      "properties": {
        "edgeName": {
          "type": "string"
        },
        "edgeUri": {
          "type": "string"
        },
        "isConnected": {
          "type": "boolean"
        },
        "isEditable": {
          "type": "boolean"
        }
      }
    },
    "RemoveSignInProviderCommand": {
      "type": "object",
      "properties": {
        "networkId": {
          "format": "uuid",
          "type": "string"
        },
        "authority": {
          "type": "string"
        }
      }
    },
    "RenderedEmailModel": {
      "type": "object",
      "properties": {
        "subject": {
          "type": "string"
        },
        "body": {
          "type": "string"
        }
      }
    },
    "ReportMetricModel": {
      "type": "object",
      "properties": {
        "component": {
          "type": "string"
        },
        "sectionPerspectiveId": {
          "format": "uuid",
          "type": "string"
        },
        "perspectiveId": {
          "format": "uuid",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "unit": {
          "type": "string"
        },
        "u": {
          "type": "string"
        },
        "aspirationalMin": {
          "format": "double",
          "type": "number"
        },
        "aspirationalMax": {
          "format": "double",
          "type": "number"
        },
        "actions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetricActionModel"
          }
        },
        "overview": {
          "type": "string"
        }
      }
    },
    "ReportOverviewSectionResult": {
      "type": "object",
      "properties": {
        "perspectiveId": {
          "format": "uuid",
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "actionsCount": {
          "format": "int32",
          "type": "integer"
        },
        "metricsCount": {
          "format": "int32",
          "type": "integer"
        },
        "metricsOutsideBenchmark": {
          "format": "int32",
          "type": "integer"
        },
        "metricsWinthinBenchmark": {
          "format": "int32",
          "type": "integer"
        },
        "order": {
          "format": "int32",
          "type": "integer"
        },
        "overview": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReportMetricModel"
          }
        }
      }
    },
    "ReportSyncCompletedCommand": {
      "type": "object",
      "properties": {
        "serviceToken": {
          "type": "string"
        },
        "syncPeriodStart": {
          "format": "date-time",
          "type": "string"
        },
        "syncPeriodEnd": {
          "format": "date-time",
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "ReportSyncStartedCommand": {
      "type": "object",
      "properties": {
        "serviceToken": {
          "type": "string"
        },
        "syncPeriodStart": {
          "format": "date-time",
          "type": "string"
        },
        "syncPeriodEnd": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "ResetPasswordCommand": {
      "required": [
        "newPassword",
        "token"
      ],
      "type": "object",
      "properties": {
        "userId": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "token": {
          "type": "string"
        },
        "newPassword": {
          "type": "string"
        },
        "apiClientId": {
          "type": "string"
        }
      }
    },
    "Resource": {
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "RetryProcessingNetworkDataCommand": {
      "type": "object",
      "properties": {
        "networkId": {
          "format": "uuid",
          "type": "string"
        },
        "purgeGroups": {
          "type": "boolean"
        },
        "purgeHashedData": {
          "type": "boolean"
        },
        "scanIncomingFolder": {
          "type": "boolean"
        },
        "publishProcessingRequests": {
          "type": "boolean"
        },
        "sendDataToAnalyticalModule": {
          "type": "boolean"
        }
      }
    },
    "SearchSettings": {
      "type": "object",
      "properties": {
        "emptyQuery": {
          "type": "string"
        },
        "hint": {
          "type": "string"
        },
        "throttleMs": {
          "format": "int32",
          "type": "integer"
        },
        "typeaheadChars": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "SearchSettingsResult": {
      "type": "object",
      "properties": {
        "hint": {
          "type": "string"
        },
        "throttleMs": {
          "format": "int32",
          "type": "integer"
        },
        "typeaheadChars": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "SectionSchema": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "statements": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StatementSchema"
          }
        }
      }
    },
    "SendEmailConfirmationTokenCommand": {
      "type": "object",
      "properties": {
        "email": {
          "format": "email",
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "SenderSettings": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "SendInvitationEmailsCommand": {
      "type": "object",
      "properties": {
        "networkId": {
          "format": "uuid",
          "type": "string"
        },
        "templateId": {
          "format": "uuid",
          "type": "string"
        },
        "userNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "SendPasswordResetTokenCommand": {
      "type": "object",
      "properties": {
        "email": {
          "format": "email",
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "ServiceFlags": {
      "enum": [
        "None",
        "OnePerNetwork"
      ],
      "type": "string"
    },
    "ServiceResult": {
      "type": "object",
      "properties": {
        "networkId": {
          "format": "uuid",
          "type": "string"
        },
        "connectorId": {
          "format": "uuid",
          "type": "string"
        }
      }
    },
    "SigmaEdgeModel": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "source": {
          "type": "string"
        },
        "target": {
          "type": "string"
        },
        "size": {
          "format": "double",
          "type": "number"
        },
        "props": {
          "type": "object",
          "additionalProperties": {}
        }
      }
    },
    "SigmaGraphModel": {
      "type": "object",
      "properties": {
        "nodes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SigmaNodeModel"
          }
        },
        "edges": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SigmaEdgeModel"
          }
        },
        "data": {
          "type": "object",
          "additionalProperties": {}
        }
      }
    },
    "SigmaNodeModel": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "x": {
          "format": "double",
          "type": "number"
        },
        "y": {
          "format": "double",
          "type": "number"
        },
        "size": {
          "format": "double",
          "type": "number"
        },
        "colors": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "entity": {
          "format": "uuid",
          "type": "string"
        },
        "props": {
          "type": "object",
          "additionalProperties": {}
        }
      }
    },
    "SignInProviderStatusResult": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean"
        }
      }
    },
    "SiteResult": {
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "slug": {
          "type": "string"
        },
        "current": {
          "type": "boolean"
        }
      }
    },
    "SiteSettingsResult": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "slug": {
          "type": "string"
        },
        "locale": {
          "type": "string"
        },
        "domains": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "email": {
          "$ref": "#/definitions/EmailSettings"
        },
        "brandManagers": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "authorization": {
          "$ref": "#/definitions/AuthorizationSiteSettings"
        },
        "integrations": {
          "$ref": "#/definitions/IntegrationsSiteSettings"
        }
      }
    },
    "SmtpSettings": {
      "type": "object",
      "properties": {
        "host": {
          "type": "string"
        },
        "userName": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "ssl": {
          "type": "boolean"
        },
        "port": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "SnapshotDataFolder": {
      "enum": [
        "Sending",
        "Incoming"
      ],
      "type": "string"
    },
    "StatementSchema": {
      "type": "object",
      "properties": {
        "itemList": {
          "$ref": "#/definitions/ItemListSchema"
        },
        "component": {
          "$ref": "#/definitions/ComponentSchema"
        },
        "assignement": {
          "$ref": "#/definitions/AssignmentSchema"
        },
        "condition": {
          "$ref": "#/definitions/ConditionalSchema"
        }
      }
    },
    "StatusEnum": {
      "enum": [
        "Invited",
        "Registered",
        "EmailUnconfimed",
        "Unknown",
        "LicenseExpired"
      ],
      "type": "string"
    },
    "StringStringKeyValuePair": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "SyncConnectorStatus": {
      "type": "object",
      "properties": {
        "files": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SyncFileInfo"
          }
        },
        "connectorId": {
          "format": "uuid",
          "type": "string",
          "readOnly": true
        },
        "connectorName": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "SyncEntitiesCommand": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/JsonConnectorEntity"
          }
        }
      }
    },
    "SyncFileInfo": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "length": {
          "format": "int64",
          "type": "integer"
        },
        "timestamp": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "SyncHashedEntitesCommand": {
      "type": "object",
      "properties": {
        "serviceToken": {
          "type": "string"
        },
        "entites": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/HashedEntity"
          }
        }
      }
    },
    "SyncHashedGroupStructureCommand": {
      "type": "object",
      "properties": {
        "serviceToken": {
          "type": "string"
        },
        "groups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/HashedGroup"
          }
        }
      }
    },
    "SyncHashedInteractionsCommand": {
      "type": "object",
      "properties": {
        "serviceToken": {
          "type": "string"
        },
        "interactions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/HashedInteraction"
          }
        }
      }
    },
    "SyncInteractionConfig": {
      "type": "object",
      "properties": {
        "lookupProps": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "edgeNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "SyncInteractionsCommand": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InteractionData"
          }
        },
        "interactionsWindowDays": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "SyncJsonAddSourceCommand": {
      "type": "object",
      "properties": {
        "networkId": {
          "format": "uuid",
          "type": "string"
        },
        "dataSourceId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "defaultRoles": {
          "type": "array",
          "items": {
            "format": "uuid",
            "type": "string"
          }
        }
      }
    },
    "SyncJsonApplyChangesCommand": {
      "type": "object",
      "properties": {
        "networkId": {
          "format": "uuid",
          "type": "string"
        },
        "connectorId": {
          "format": "uuid",
          "type": "string"
        },
        "runInTransaction": {
          "type": "boolean"
        },
        "context": {},
        "keyProps": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/JsonConnectorEntity"
          }
        },
        "keyMatching": {
          "$ref": "#/definitions/KeyMatchingBehaviour"
        },
        "syncType": {
          "$ref": "#/definitions/SyncTypeEnum"
        }
      }
    },
    "SyncJsonConfig": {
      "type": "object",
      "properties": {
        "defaultRoles": {
          "type": "array",
          "items": {
            "format": "uuid",
            "type": "string"
          }
        },
        "keepHistory": {
          "type": "boolean"
        },
        "validateSchema": {
          "type": "boolean"
        },
        "keyProps": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "SyncJsonValidateDataCommand": {
      "type": "object",
      "properties": {
        "networkId": {
          "format": "uuid",
          "type": "string"
        },
        "connectorId": {
          "format": "uuid",
          "type": "string"
        },
        "context": {},
        "keyProps": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "keyMatching": {
          "$ref": "#/definitions/KeyMatchingBehaviour"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/JsonConnectorEntity"
          }
        },
        "syncType": {
          "$ref": "#/definitions/SyncTypeEnum"
        }
      }
    },
    "SyncMembersCommand": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/JsonConnectorEntity"
          }
        },
        "validateSchema": {
          "type": "boolean"
        },
        "keepHistory": {
          "type": "boolean"
        }
      }
    },
    "SyncPropMappingSettings": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "prop": {
          "type": "string"
        },
        "groups": {
          "type": "string"
        },
        "category": {
          "type": "string"
        },
        "relationship": {
          "type": "string"
        },
        "const": {
          "type": "string"
        },
        "excluded": {
          "type": "boolean"
        }
      }
    },
    "SyncSettings": {
      "type": "object",
      "properties": {
        "mappings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SyncPropMappingSettings"
          }
        }
      }
    },
    "SyncStatusResult": {
      "type": "object",
      "properties": {
        "incoming": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SyncConnectorStatus"
          }
        },
        "sending": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SyncConnectorStatus"
          }
        },
        "failed": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SyncConnectorStatus"
          }
        }
      }
    },
    "SyncTypeEnum": {
      "enum": [
        "Unknown",
        "Users",
        "Groups",
        "HashedEntities",
        "HashedInteractions"
      ],
      "type": "string"
    },
    "SyncUsersCommand": {
      "type": "object",
      "properties": {
        "serviceToken": {
          "type": "string"
        },
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserEntity"
          }
        }
      }
    },
    "TokenResponseModel": {
      "type": "object",
      "properties": {
        "access_token": {
          "type": "string"
        },
        "token_type": {
          "type": "string"
        },
        "expires_in": {
          "format": "int32",
          "type": "integer"
        },
        "refresh_token": {
          "type": "string"
        },
        ".issued": {
          "type": "string"
        },
        ".expires": {
          "type": "string"
        },
        "as:client_id": {
          "type": "string"
        },
        "userName": {
          "type": "string"
        }
      }
    },
    "UpdateConnectorCommand": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string"
        },
        "name": {
          "description": "Optional user given name for the connector",
          "type": "string"
        },
        "interactionConnectorConfig": {
          "$ref": "#/definitions/SyncInteractionConfig"
        },
        "entityConnectorConfig": {
          "$ref": "#/definitions/SyncJsonConfig"
        }
      }
    },
    "UpdateEmailNotificationSettingCommand": {
      "type": "object",
      "properties": {
        "networkId": {
          "format": "uuid",
          "type": "string"
        },
        "notificationGroup": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        }
      }
    },
    "UpdateRoleCommand": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "ldapGroups": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "order": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "UserEntity": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "ids": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "props": {
          "type": "object",
          "additionalProperties": {}
        }
      }
    },
    "UserNetworkResult": {
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "UserSettingsResult": {
      "type": "object",
      "properties": {
        "permissions": {
          "type": "object",
          "additionalProperties": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "format": "uuid",
              "type": "string"
            }
          }
        },
        "networkId": {
          "format": "uuid",
          "type": "string"
        },
        "isAdmin": {
          "type": "boolean"
        },
        "hasManyNetworks": {
          "type": "boolean"
        },
        "userName": {
          "type": "string"
        },
        "searchSettings": {
          "$ref": "#/definitions/SearchSettingsResult"
        },
        "connectedAppsAvailable": {
          "type": "boolean"
        }
      }
    },
    "UserStatus": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/StatusEnum"
        },
        "userName": {
          "type": "string"
        },
        "signInUri": {
          "type": "string"
        },
        "invitation": {
          "$ref": "#/definitions/InvitationInfo"
        },
        "registration": {
          "$ref": "#/definitions/RegistrationInfo"
        },
        "license": {
          "$ref": "#/definitions/LicenseInfo"
        }
      }
    },
    "ValidateEntitiesCommand": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/JsonConnectorEntity"
          }
        }
      }
    },
    "ValidateInvitationsCommand": {
      "type": "object",
      "properties": {
        "networkId": {
          "format": "uuid",
          "type": "string"
        },
        "invitations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MemberInvitationModel"
          }
        }
      }
    },
    "ValidatePasswordResetTokenCommand": {
      "required": [
        "token"
      ],
      "type": "object",
      "properties": {
        "userId": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "token": {
          "type": "string"
        }
      }
    },
    "ValidatePasswordResetTokenResult": {
      "type": "object",
      "properties": {
        "tokenValid": {
          "type": "boolean"
        },
        "userName": {
          "type": "string"
        }
      }
    },
    "VertexSearchResult": {
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "type": "string"
        },
        "photo": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "details": {
          "type": "string"
        },
        "score": {
          "format": "double",
          "type": "number"
        },
        "exactMatch": {
          "type": "boolean"
        }
      }
    }
  }
}